#include <iostream>
#include <queue>
#include <unordered_map>
#include <vector>
#include <string>
#include <climits>

using namespace std;

unordered_map<string, vector<pair<string, int>>> lokasiUtbk = {
    {"Gerbang Masuk", {{"LPTIK", 1}}},
    {"LPTIK", {{"Gerbang Masuk", 1}, {"LAB FKIP", 1}, {"Danau Unib", 7}, {"Fisip", 4}}},
    {"LAB FKIP", {{"LPTIK", 1}, {"LAB SI", 5}}},
    {"LAB SI", {{"LAB FKIP", 5}, {"Stadion", 2}}},
    {"Stadion", {{"LAB SI", 2}, {"FKIK", 4}}},
    {"FKIK", {{"Stadion", 4}, {"Perpustakaan", 8}}},
    {"Perpustakaan", {{"FKIK", 8}, {"Danau Unib", 5}}},
    {"Danau Unib", {{"Perpustakaan", 5}, {"GLT", 3}, {"LPTIK", 7}}},
    {"GLT", {{"Danau Unib", 3}, {"LAB Komputer Hukum", 15}}},
    {"LAB Komputer Hukum", {{"GLT", 15}, {"Masjid Darul Ulum", 3}, {"GOR UNIB", 2}, {"Gedung Rektorat", 8}}},
    {"Masjid Darul Ulum", {{"LAB Komputer Hukum", 3}}},
    {"GOR UNIB", {{"LAB Komputer Hukum", 2}}},
    {"Gedung Rektorat", {{"LAB Komputer Hukum", 8}, {"Fisip", 2}, {"FEB", 7}}},
    {"Fisip", {{"Gedung Rektorat", 2}, {"LPTIK", 4}}},
    {"FEB", {{"Gedung Rektorat", 7}}}
};

void dijkstra (string mulai, string tujuan) {
    unordered_map<string, int> distance;
    unordered_map<string, string> parent;
    priority_queue<pair<int, string>, vector<pair<int, string>>, greater<pair<int, string>>> pq;

    for (auto& node : lokasiUtbk) {
        distance[node.first] = INT_MAX;
    }
    distance[mulai] = 0;
    pq.push({0, mulai});

    while (!pq.empty()) {
        auto [dist, current] = pq.top();
        pq.pop();

        if (current == tujuan) break; 

        for (auto& neighbor : lokasiUtbk[current]) {
            string next_node = neighbor.first;
            int weight = neighbor.second;

            if (distance[current] + weight < distance[next_node]) {
                distance[next_node] = distance[current] + weight;
                parent[next_node] = current;
                pq.push({distance[next_node], next_node});
            }
        }
    }

    if (distance[tujuan] == INT_MAX) {
        cout << "Tidak ada jalur dari " << mulai << " ke " << tujuan << endl;
        return;
    }

    cout << "Jalur Terpendek dari " << mulai << " ke " << tujuan << " (Jarak: " << distance[tujuan] << "): ";

    vector<string> path;
    string crawl = tujuan;
    while (crawl != mulai) {
        path.push_back(crawl);
        crawl = parent[crawl];
    }
    path.push_back(mulai);

    for (auto it = path.rbegin(); it != path.rend(); ++it) {
        cout << *it;
        if (it + 1 != path.rend()) cout << " -> ";
    }
    cout << endl;
}

int main() {
    string mulai = "Gerbang Masuk";
    string tujuan = "FKIK";
    dijkstra(mulai, tujuan);

    return 0;
}
